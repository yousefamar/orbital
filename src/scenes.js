// Generated by LiveScript 1.2.0
var Scene, Space;
ORB.Scene = Scene = (function(){
  Scene.displayName = 'Scene';
  var prototype = Scene.prototype, constructor = Scene;
  function Scene(){
    this.entityManager = new ORB.EntityManager(this);
  }
  prototype.add = function(entity){
    return this.entityManager.add(entity);
  };
  prototype.mouseDown = function(x, y, event){};
  prototype.mouseMove = function(x, y){};
  prototype.mouseUp = function(x, y, event){};
  prototype.keyDown = function(code){};
  prototype.keyUp = function(code){};
  prototype.tick = function(delta){
    return this.entityManager.tick(delta);
  };
  prototype.render = function(ctx){
    return this.entityManager.render(ctx);
  };
  return Scene;
}());
ORB.Space = Space = (function(superclass){
  var prototype = extend$((import$(Space, superclass).displayName = 'Space', Space), superclass).prototype, constructor = Space;
  function Space(){
    var i$;
    Space.superclass.call(this);
    this.camera = {
      zoom: 1,
      x: -400,
      y: -225,
      moveTowards: function(entity, speed){
        speed = speed || 0.1;
        speed /= 1 + this.zoom / 10;
        this.x += speed * (this.zoom * entity.x - this.x - 400);
        return this.y += speed * (this.zoom * entity.y - this.y - 225);
      },
      applyTransform: function(ctx){
        ctx.translate(-this.x, -this.y);
        return ctx.scale(this.zoom, this.zoom);
      }
    };
    this.add(this.player = new ORB.Player(this));
    for (i$ = 0; i$ < 10; ++i$) {
      this.add(new ORB.Planet(this, (Math.random() - 0.5) * 100, (Math.random() - 0.5) * 200, Math.random() > 0.66 ? 2 : 4));
    }
  }
  prototype.keyDown = function(code){
    if (code === 65 || code === 37) {
      return this.player.keys.a = true;
    } else if (code === 68 || code === 39) {
      return this.player.keys.d = true;
    } else if (code === 87 || code === 38) {
      return this.player.keys.w = true;
    } else if (code === 83 || code === 40) {
      return this.player.keys.s = true;
    }
  };
  prototype.keyUp = function(code){
    if (code === 65 || code === 37) {
      return this.player.keys.a = false;
    } else if (code === 68 || code === 39) {
      return this.player.keys.d = false;
    } else if (code === 87 || code === 38) {
      return this.player.keys.w = false;
    } else if (code === 83 || code === 40) {
      return this.player.keys.s = false;
    }
  };
  prototype.tick = function(delta){
    superclass.prototype.tick.apply(this, arguments);
    this.camera.moveTowards(this.player);
    return this.camera.zoom = 1 + 9 * (1 - (this.player._radiusSmooth - 0.798) / 24.73);
  };
  prototype.render = function(ctx){
    ctx.save();
    this.camera.applyTransform(ctx);
    superclass.prototype.render.apply(this, arguments);
    return ctx.restore();
  };
  return Space;
}(ORB.Scene));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}